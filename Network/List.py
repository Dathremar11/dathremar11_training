""" ___Списки___ """ # Можно обращаться по индексам, Упорядоченный изменяемый тип данных
# Изменяемый упорядоченный тип данных.
# Последовательность элементов, разделенных между собой запятой и заключенных в квадратные скобки.

list = [10, 20, 30, 'world']

access = ['switchport mode access',     # 2 строки в одном списке
          'switchport access vlan']

'>>> ['switchport mode access', 'switchport access vlan']'

l = [100, 200, 300, 400, 500, 600]      # Список
l[0] = 2                                # Списки - изменяемый тип данных
'>>> [2, 200, 300, 400, 500, 600]'      # (!) При этом id(l) - не меняется
l[::2]                                  # Срез с шагом 2
'>>> [100, 300, 500]'
l[::-1]                                 # Перевернутый список
'>>> [600, 500, 400, 300, 200, 100]'
l.index(300)                            # Поиск индекса элемента
'>>> 2'
len(l)                                  # Кол-во элементов в списке
'>>> 6'

""" ___Список Списков___
Вывод команды которую разобрали на части и дальше с ней надо что-то делать"""
interfaces                              # Списки в списках
[['FastEthernet0/0', '15.0.15.1', 'up'],
 ['FastEthernet0/1', '192.168.1.1', 'up'],
 ['FastEthernet0/2', '10.0.2.1', 'down']]

interfaces[0]                           # Показать 0 список
['FastEthernet0/0', '15.0.15.1', 'up']

interfaces[0][0]                        # Показать 0 элемент 0 списка
'FastEthernet0/0'

l = [100, 200, 300, 400, 500, 600]    # Список
l2 = l                                # l2 ссылается на объект l; id 56244872 | (!) ИСПОЛЬЗУЕТСЯ КРАЙНЕ РЕДКО
l2[0] = 111                 

l2                                    # id(l 56244872
'[111, 200, 300, 400, 500, 600]'
id(l)
56244872
l1
'[111, 200, 300, 400, 500, 600]'

l3 = l2.copy()
l3
[111, 200, 300, 400, 500, 600]
id(l3)
56241352                              # id отличается от id l и l2, т.к. ссылается на другой объект

l = [1, 2, 'new']                     # Создание нового списка, новый список - другой id
id(l)                                 
55675912                              # l изменен, теперь он ссылается на другой объект

l2                                    # l изменили, l2 остался старым
'[111, 200, 300, 400, 500, 600]'
id(l)
56244872

l2.append(700)                        # Добавляет элемент в конец списка
id(l2)
56244872
'[111, 200, 300, 400, 500, 600, 700]' # Добавляет только (!) ОДИН элемент

""" Вставка по середине списка """
l.insert(2, 250)                      # Меняет список на месте | Затратный
'[100, 200, 250, 300, 400, 500, 600]'
resuls = l.insert(2, 250)
print(resuls)
None                                  # insert - ничего не возвращает

l.extend([800, 900])                  # Расширить список - добавить несколько элементов
'[100, 200, 250, 250, 300, 400, 500, 600, 800, 900]'

""" Объединение списков """
vlans1 = [1, 2, 3]          # id(vlans1) = 39671624
vlans2 = [10, 20, 30]       # id(vlans2) = 39671688    
z = vlans1 + vlans2         # Создает новый список - новый id(z) = 39673544
'[1, 2, 3, 10, 20, 30]'     # Исходные списки не меняются
vlans1.extend(vlans2)       # Добавляем содержимое другого списка, id не меняется| id(vlans1) = 39671624

""" Удаление элементов списка """
# 1) .pop        | Удаление по ИНДЕКСУ
vlans1.pop()                # Удаляет последний элемент списка и возвращает его
'30'
vlans1.pop(3)               # Удалил элемент '10' 
vlans1
'[1, 2, 3, 20]'
# .remove        | Удаление по ЭЛЕМЕНТУ
vlans1.remove(20)           # Удаляет элемент по значению
vlans1
'[1, 2, 3]'

""" Сортировка списков """  # Упорядочивание собранных элементов
# 1) .sort       | Метод списка, работает только на списки
vlans1 = [4, 100, 5, 1, 50]
vlans1.sort()               # Сортирует на месте, ничего не возвращает
vlans1              
'[1, 4, 5, 50, 100]'
result = vlans1.sort()      # Ничего не возвращает
'none'

# 1) sorted
vlans1 = [4, 100, 5, 1, 50] # Возвращает список, но работает на разных элементах
sorted(vlans1)
'[1, 4, 5, 50, 100]'
result = sorted(vlans1)     # (!)
'[1, 4, 5, 50, 100]'

sorted('test')              # Сортировка строки | Не метод
['e', 's', 't', 't']

""" Конвертация из списка в строку """
#1) .join - обратный метод .split, список строк объединяет  с помощью разделителя ',' в одну строку
vlans = ['1', '2', '3']     # Список строк
','.join(vlans)             # Создает из списка - строку
'1,2,3'

sep = ','                   # Разделитель = ','
sep.join(vlans)             # К разделителю применить метод .join и как аргумент передать список элементов
!vlans = [1, 2, 3]          # sep.join(vlans)  - не сработает, т.к. работает только на списки* строк

