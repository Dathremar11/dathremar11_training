"""___Словари___ Изменяемый тип данных"""     # Ассоциативный массив, хэш таблица - те же принципы
# Удобное обращение к элементам, т.к. порой с ассоциировать нужный элемент списка и его индекс в большом коде бывает сложно
r1 = {'hostname': 'r1',
      'ios': '15,4',            # ios программное обеспечение используемое в коммутаторах и маршрутизаторах Cisco
      'ip': '10.1.1.1'}         # internetwork operation system - ios

r1['ip']                        # ip - Ключ
'10.1.1.1'                      # '10.1.1.1' - Значение, по значению нельзя получить ключ

""" Создание новой пары Ключ - Значение """
r1['location'] = 'Globe str 12'
{'hostname': 'r1', 'ios': '15,4', 'ip': '10.1.1.1', 'location': 'Globe str 12'}
r1['location'] = 'Globe str 35' # Переззапись значения

""" Удаление пары Ключ - Значение  """
del r1['location']              # del - операто, не функция()
{'hostname': 'r1', 'ios': '15,4', 'ip': '10.1.1.1'}

""" Упорядоченность словарей """
$Словари до python 3.6< были не упорядочены
словарь упорядочен в порядке создания ключей (внутренняя реализация)
$python 3.7> словари упорядочены в порядке добавления: 1ключ, 2ключ, 3ключ, и т.д.
* Не во всех IDE ($ не обращать внимание на порядок)

$ Ключами могут быть только: Числа; Строки и Кортежи

$ Работа словаря:
В словаре, при хранении пары Ключ - Значение - записывается ХЭШ ключа, поиск происходит по хэшу
Для того, чтобы python мог записать Ключ - Значение - ему нужен объект с которого можно взять хэш,
если объект изменяемый (список) - мы не сможем получить значение по ключу (т.к. хэш сумма от измененного объекта измениться)

""" Показать параметр вложенного словаря """ 

Moscow = {
    'r1' : {
    'hostname': 'Msk_1',
    'location': 'frunza',
    'vendor': 'Cisco',
    'model': '4451',
    'ip': '10.255.0.1'
    },
    'r2' : {
    'hostname': 'Msk_2',
    'location': 'dekabristov',
    'vendor': 'Cisco',
    'model': '4451',
    'ip': '10.255.0.2'}
}

Moscow['r1']['ip']                 # Обращение к конкретному элементу конкретного словаря
'10.255.0.1'

""" id копий (ссылки) словарей """ # Такие же правила как и в списках
d1 = {1:100}
d2 = d1
>>> id(d1)
39644760
>>> id(d2)
39644760
>>> d2 = d1.copy
9644688

""" Метод ___.setdefault___ Если ключа нет, вместо ошибки получать 'none' (пример) """
r1
>>> {'hostname': 'r1', 'ios': '15,4', 'ip': '10.1.1.1'}
r1.get('location')                   # Если нет ключа - возвращает none
$ None в python не видно (только через print)
print(r1.get('location'))
>>> None
r1.get('location, 10')               # (' ', 'что сказать вместо ошибки') | Если нет ключа
>>> 10

r1.setdefault('location')            # Ищет ключ, если ключа нет, то он создает ключ со значением None
r1
>>> {'hostname': 'r1', 'ip': '10.1.1.1', 'ios': '15,4', 'location': None}
r1.setdefault('ios')                 # Если задать значение которое уже есть, то возвращает значение по ключу
>>> '15,4'
$ Метод .setdefault заменяет конструкцию:

if key in r1:
    value = r1[key]
else:
    r1[key] = None

$ Не нужно использовать метод .setdefault, как замену r1['ios'] = '15.5'
# Т.к. когда ключ есть, он не перезапишет значение, а вернет текущее

""" Имея словарь получить список всех ключей или всех значений """
r1
>>> {'hostname': 'r1', 'ip': '10.1.1.1', 'ios': '15,4'}

r1.keys()                                   # Показать все ключи
>>> dict_keys(['hostname', 'ip', 'ios'])    
r1.values()                                 # Показать все значения
>>> dict_values(['r1', '10.1.1.1', '15,4'])
r1.items()                                  # Показывает пары Ключ - Значение
>>> dict_items([('hostname', 'r1'), ('ip', '10.1.1.1'), ('ios', '15,4')])

""" ___dict_keys___ - динамически меняется вместе со словарем (не срез) """
r1
>>> {'hostname': 'r1', 'ip': '10.1.1.1', 'ios': '15,4'}
keys = r1.keys()                                        # Срез
keys
dict_keys(['hostname', 'ip', 'ios'])                    # Объект - который автоматически меняется со словарем
r1['location'] = 'Globe str 100'
keys
dict_keys(['hostname', 'ip', 'ios', 'location'])        # ['location'] = 'Globe str 100' - автоматически добавился в keys
# dict_keys в список для работы:
keys = list(r1.keys())

# Проверки:
'ip' in keys        # Есть ли ключ в словаре
'ip' in r1

