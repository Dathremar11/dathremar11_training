Классы и объекты

объект = данные + код           класс - это типо объектов

class Goat:
    age = 0                     // абстрактные объекты
    name = ""                   // Набор атрибутов - свойства класса (атрибуты)
    weith = 0.0 (.0 или 0.)     // Совокупные логически целые данные

    def show(self):             // Метод (!) - название функций класса
        print(self.name)        // self - ссылка на объект для которого вызыван этот класс
        print(self.age)         

        a = Goat()              // Объект - это экземпляр класса, конкретная сущность (Коза)

Действия с объектом:
1) Изменене отребутов:
    a.age = 2                   // Создавать свойства экземпляра класса
    a.age += 1 
    b = Goat()
    b.name = "Зорька"
    b.age = 1

        
    a.show() - параметр  а - отправляется внутрь метода автоматически
    поэтому при вызове мы увидим 0 параметров
    А в момент когда мы описываем метод - там будет параметр

(!)  Методы могут быть с дополнительными параметрами:
    def show(self, name) - тогда, name нужно перечислять в а.show  

(!)  Если мы хотим усовершенствовать "Козу", то мы должны создавать или менять методы козы
    а не другие функции находящиеся в другом месте когда.
    Если дело касается "Козы" то мы открываем класс Козы
    Это называется инкапсуляция ответственности

(!)  Встроить получение параметров при создании конкретного экземпляра класса 
    a = student ("Вася", 17), где "Вася", 17 - это параметры
    Получать параметры конструирования
    Заниматься инициализацией атрибутов должен специальный метод, который называется конструктов (Init) конструирующий метод
    Все атрибуты будем создавать внутри
Название метода специфическое и его не нужно вызывать ( конструктор )
    class Student:
        def __init__(self, name, age):   // Задача метода init в том, чтобы используя 
        свои параметры осуществить с объектом self,который конструируется и пока
         не закончиться метод init объект еще не до создан
            self.name=name // появляется имя нейм в пространстве объекта self

В python нет нормального диструктора объектов в python, в отличии от С

Создаем атрибуты внутри конструктора, которые являются обязательными
            self.name=name 

    Если уже описан конструктор __init__, то при попатке создать:
    b = studet() - интерпретатор будет ругаться на то, что отсутствуют параметры

    Дзен python: Явно прописанные параметры - лучше чем не явные, см. выше

    В python несколько конструкторов писать нельзя, конструктор __init__ - один
    В python нельзя создать несколько лжноименных функций, нету перегрузки по имени функции

    Правило вежливости:
        приклеиваем новый атрибут:
        a.tail = "Физика"
        b.leg = 5

    В python конкретный объект может отличаться от представителей своего класса наличием дополнительных атрибутов
(!)  Новые атрибуты (свойства) создавать только в конструкторе __init__
    Конструктор - это метод,который точно будет вызван для любого экземпляра класса

(!)    Классы в питоне являются объектами и принадлежат классу class
    У класса "Козы" есть свое пространсво имен, поэтому есть возможность создавать методы универсальные для всех "Коз"
    